require 'rails_helper'

describe ClearancingService do
  subject(:clearancing_service) { ClearancingService.new }

  describe "::process_items" do

    context "total success" do
      let(:items)         { 5.times.map { FactoryGirl.create(:item) } }
      let(:file_name)     { generate_csv_file(items) }

      before do
        clearancing_service.process_items(items.map(&:id))
        @clearancing_status = clearancing_service.clearancing_status
      end

      it "creates a clearance batch" do
        expect(@clearancing_status.clearance_batch.new_record?).to be false
      end

      it "encounters no errors" do
        expect(@clearancing_status.errors.empty?).to be true
      end

      it "adds all the items to the batch" do
        expect(@clearancing_status.clearance_batch.items.pluck(:id).sort).to eq(items.map(&:id).sort)
      end

      it "sets all items to 'clearanced' status" do
        expect(@clearancing_status.clearance_batch.items.pluck(:status).uniq).to eq(["clearanced"])
      end
    end

    context "partial success" do
      let(:valid_items)       { 3.times.map { FactoryGirl.create(:item) } }
      let(:unsellable_item)   { FactoryGirl.create(:item, status: 'clearanced') }
      let(:non_existent_id)   { 987654 }
      let(:invalid_id)        { 'no thanks' }
      let(:no_id)             { nil }
      let(:float_id)          { 123.45 }
      let(:invalid_items)     {
        [
          non_existent_id,
          invalid_id,
          no_id,
          float_id,
          unsellable_item.id
        ]
      }
      before do
        all_item_ids = valid_items.map(&:id) + invalid_items
        clearancing_service.process_items(all_item_ids)
        @clearancing_status = clearancing_service.clearancing_status
      end

      it "detects all errors generated by invalid items" do
        expect(@clearancing_status.errors.count).to eq(invalid_items.count)
        [ invalid_id, no_id ].each do |bad_id|
          expect(@clearancing_status.errors).to include("Item #{bad_id.to_i} is not valid")
        end
        expect(@clearancing_status.errors).to include("Item #{non_existent_id} could not be found")
        expect(@clearancing_status.errors).to include("Item #{float_id.to_i} could not be found")
        expect(@clearancing_status.errors).to include("Item #{unsellable_item.id} could not be clearanced")
      end

      it "includes all valid items in the batch" do
        expect(@clearancing_status.clearance_batch.items.pluck(:id)).to eq(valid_items.map(&:id))
      end
    end

    context "total failure" do
      let(:invalid_item_ids) { [987654, 'no thanks'] }

      before do
        clearancing_service.process_items(invalid_item_ids)
        @clearancing_status = clearancing_service.clearancing_status
      end

      it "should indicate all items as having errors" do
        expect(@clearancing_status.errors.count).to eq(invalid_item_ids.count)
      end
      it "should not create a new ClearanceBatch" do
        expect(@clearancing_status.clearance_batch.new_record?).to be true
      end
    end
  end
end
